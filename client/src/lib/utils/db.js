// import mariadb
import mariadb from 'mariadb';

// create a new connection pool
const pool = mariadb.createPool({
	host: 'db',
	user: process.env.MARIA_DB_USER,
	password: process.env.MARIA_DB_PASS,
	database: 'content_dashboard'
});

const getConnection = () => {
	return new Promise(function (resolve, reject) {
		pool
			.getConnection()
			.then(function (connection) {
				resolve(connection);
			})
			.catch(function (error) {
				reject(error);
			});
	});
};

//finds user data given a google ID, not the primary key generated by the DB
export const getUserData = async (userId) => {
	let userData;
	let conn;
	try {
		conn = await pool.getConnection();
		const query = `
			SELECT 
			    users.*,
			    GROUP_CONCAT(roles.role_label) AS roles
			FROM 
			    users
			LEFT JOIN 
			    role_assignments ON users.uid = role_assignments.uid
			LEFT JOIN 
			    roles ON role_assignments.rid = roles.rid
			WHERE 
			    users.gid = ?
			GROUP BY 
			    users.uid;
		`;
		const rows = await conn.query(query, [userId]);
		if (rows.length) {
			userData = rows[0];
			// Convert comma-separated roles string into array
			userData.roles = userData.roles ? userData.roles.split(',') : [];
		}
	} catch (err) {
		console.error(err);
		return null;
	} finally {
		if (conn) {
			console.log('ending db conn...');
			await conn.end();
		}
		return userData;
	}
};

// export const getUserData = async (userId) => {
// 	let userData;
// 	let conn;
// 	try {
// 		conn = await pool.getConnection();
// 		const rows = await conn.query(`SELECT * FROM users WHERE gid = '${userId}'`);
// 		if (rows.length) {
// 			userData = rows[0];
// 		}
// 	} catch (err) {
// 		console.error(err);
// 		return null;
// 	} finally {
// 		if (conn) {
// 			console.log('ending db conn...');
// 			await conn.end();
// 		}
// 		return userData;
// 	}
// };

export const confirmUserLogin = async (profile) => {
	let conn;
	let allow = false;
	try {
		conn = await pool.getConnection();
		const rows = await conn.query(`SELECT gid FROM users WHERE email = '${profile.email}'`);
		if (rows.length) {
			if (!rows[0].gid) {
				// const resp = await conn.query('INSERT INTO users (email) values (?) ')
				const resp = await conn.query(
					'UPDATE users SET gid = ?, name = ?, picture = ? WHERE email = ?',
					[profile.id, profile.name, profile.picture, profile.email]
				);
				console.log(resp);
			}
			console.log('allow');
			allow = true;
		} else if (profile.email.includes('@mrc.org')) {
			console.log('new mrc.org user');
			let resp = await conn.query(
				'INSERT INTO users (gid, name, picture, email) VALUES (?, ?, ?, ?)',
				[profile.id, profile.name, profile.picture, profile.email]
			);
			console.log({ 'user insert response': resp });
			const insertedId = Number(resp?.insertId);
			resp = await conn.query('INSERT INTO role_assignments (rid, uid) VALUES (?, ?)', [
				1,
				insertedId
			]);
			console.log({ 'role_assignments insert response': resp });
			console.log('allow');
			allow = true;
		}
	} catch (err) {
		console.error(err);
	} finally {
		if (conn) {
			console.log('ending db conn...');
			await conn.end();
		}
		console.log(allow);
		return allow ? profile : null;
	}
};

// expose the ability to create new connections
export default getConnection;
